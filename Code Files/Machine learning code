#importing libraries
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.svm import SVR
import pandas as pd
import numpy as np
import pandas_datareader.data as web
import datetime as dt
import matplotlib.pyplot as plt
from sklearn.metrics import accuracy_score
from google.colab import files files.upload()
df1=pd.read_csv('AAPL (4).csv')
df1
df1.tail()
df11 = df1[['Adj Close']]
df11[['Adj Close']].tail()
df11['prediction1'] = df11[['Adj Close']].shift(-15)
print(df11)
#Create a data set X and convert it into numpy array , which will be having actual values
X1 = np.array(df11.drop(['prediction1'],1))
#removing last 15 rows
X1 = X1[:-15]
print(X1)
#Create a dataset y which will be having Predicted values and convert into numpy array
y1 = np.array(df11['prediction1'])
#remove last 15 rows
y1 = y1[:-15]
print(y1)
# Spliting the data into train and test with 90 & 10 % respectively
x1_train, x1_test, y1_train, y1_test = train_test_split(X1, y1, test_size=0.1)
# SVM Model
svr = SVR(kernel='rbf', C=1e3, gamma=0.1)
Straining the model svr.fit(x4 train, y4 train) 
y4	red = svr.predict(x4_test) print(y4	red) 
#Reliance 
# The best possible score is 1.0 
svm confidence4 = svr.score(x4 test, y4 test) print("svm confidence4:", svm confidence4) accuracy score4 = int(svm confidence4*100) print("accuracy_score4:‚Äù,accuracy_score4) 
#This is the latest 15 days stock prices, we will use these values to predict next 15 days prices forecast4 = np.array(df44.drop(['prediction4'],1))[-15:] 
print(forecast4) plt.plot(forecast4) 
pit.title("Latest 30 days stock prices") plt.x1abe1('Days') 
pit.y1abe1('Price') #Re1iance 
#Predicted Values for next 15 days stock prices svm	rediction4 = svr.predict(forecast4) print(svm	rediction4) 
pit.plot(svm	rediction4) 
pit.title("Next 15 days stock prices of Reliance") pit.x1abel('Days') 
plt.y1abe1('Price') 
#plotting and comparing stock prices pit.subplot(1,2,1) 
pit.plot(forecast4) 
plt.title("Latest 30 days stock prices") pit.x1abe1('Days') 
plt.y1abe1('Price') pit.subp1ot(1,2,2) plt.plot(svm	rediction4) 
plt.title("Next 30 days stock prices") plt.x1abe1('Days') 
plt.y1abe1('Price') 
